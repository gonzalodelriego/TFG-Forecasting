from sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_splitimport pandas as pdimport configdf = pd.read_csv (config.csv_calificated_history_path)x = df[['swellDirection','swellHeight','swellPeriod','windSpeed','windDirection','tide']]y = df['sardinero_uno']# Dividimos los datos para entrenar y testearx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 3)columns = df.keys()regresion = LinearRegression()modelo = regresion.fit(x_train,y_train)intercepcion = regresion.intercept_coeficiente = regresion.coef_prediccion = regresion.predict(x_test)evaluacion = regresion.score(x_test, y_test)# COMPROBACIÃ“N DE LA DIFERENCIA DE CALIFICACIONES ENTRE EL ALGORITMO Y EL MODELOdef model_desviation(x_test,prediccion,df):    algorithm_scores = df['sardinero_uno']    x_index = x_test.index    model_scores = prediccion    index = 0    resultados = []    for x in x_index:        real_score = algorithm_scores[x]        model_score = model_scores[index]        regla_de_tres(real_score,model_score)        resultados.append(abs(100-regla_de_tres(real_score,model_score)))        index +=1    return resultados    def porcentaje_diferencia_resultados (resultados):    avg = sum(resultados)/len(resultados)    return avgdef regla_de_tres (a,b):    return (100*b)/adiferencia_algoritmo_vs_modelo = porcentaje_diferencia_resultados(model_desviation(x_test,prediccion,df))