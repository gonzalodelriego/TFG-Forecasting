from sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import mean_squared_error, r2_scoreimport pandas as pdimport configspot = 'farolillo'new_data = {'swellDirection':[289.67],            'swellHeight':[2.93],            'swellPeriod':[14.37],            'windSpeed':[5.41],            'windDirection':[278.07],            'tide':[0.5]            }api_data = pd.DataFrame(data=new_data)def model():    df = pd.read_csv (config.csv_calificated_history_path)    x = df[['swellDirection','swellHeight','swellPeriod','windSpeed','windDirection','tide']]    y = df[spot]    # Dividimos los datos para entrenar y testear    x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 3)    # columns = df.keys()        regresion = LinearRegression()    modelo = regresion.fit(x_train,y_train)    # mod = smf.ols('y ~ x1 + x2', data=df).fit()     # regresion.fit(x,y)        # intercepcion = regresion.intercept_    # coeficiente = regresion.coef_        prediccion = regresion.predict(x_test)    # prediccion = regresion.predict(api_data)    # Veamos los coeficienetes obtenidos, En nuestro caso, serán la Tangente    print('Coefficients: \n', regresion.coef_)    # Este es el valor donde corta el eje Y (en X=0)    print('Independent term: \n', regresion.intercept_)    # Error Cuadrado Medio    # print("Mean squared error: %.2f" % mean_squared_error(y_train, y_test))    # Puntaje de Varianza. El mejor puntaje es un 1.0    print('Variance score: %.2f' % r2_score(y_train, y_test))    # evaluacion = regresion.score(x_test, y_test)    return prediccion# COMPROBACIÓN DE LA DIFERENCIA DE CALIFICACIONES ENTRE EL ALGORITMO Y EL MODELOdef model_desviation(x_test,prediccion,df):    algorithm_scores = df['sardinero_uno']    x_index = x_test.index    model_scores = prediccion    index = 0    resultados = []    for x in x_index:        real_score = algorithm_scores[x]            model_score = model_scores[index]                diference = abs(real_score-model_score)        # regla_de_tres(real_score,model_score)        # print("La diferencia entre "+str(real_score)+ " y "+str(model_score)+ " es "+ str(diference))        # regla_de_tres_2(diference)        # resultados.append(abs(100-regla_de_tres(real_score,model_score)))        resultados.append(regla_de_tres_2(diference))        index +=1    return resultados    def porcentaje_diferencia_resultados (resultados):    avg = sum(resultados)/len(resultados)    return avg# def regla_de_tres (a,b):#     return (100*b)/adef regla_de_tres_2(b):    return (100*b)/10pred = model()# a = model_desviation(x_test,prediccion,df)# diferencia_algoritmo_vs_modelote = porcentaje_diferencia_resultados(a)